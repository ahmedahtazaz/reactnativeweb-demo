{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","email","password","handleEmail","text","setState","handlePassword","_postData","a","async","formData","FormData","append","console","log","fetch","proxyurl","method","body","then","response","json","responseJson","alert","message","catch","error","logo","require","View","style","backgroundColor","width","wp","height","hp","alignItems","justifyContent","flexDirection","Image","source","Text","color","fontSize","marginTop","TextInput","borderColor","borderWidth","placeholder","placeholderTextColor","onChangeText","this","marginLeft","marginRight","Button","onPress","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,6LCItBC,E,2MAEjBC,MAAQ,CACNC,MAAO,GACPC,SAAU,I,EAEdC,YAAc,SAACC,GACX,EAAKC,SAAS,CAAEJ,MAAOG,K,EAE3BE,eAAiB,SAACF,GACd,EAAKC,SAAS,CAAEH,SAAUE,K,EA2C9BG,UAAY,0BAAAC,EAAAC,OAAA,iDAENC,EAAW,IAAIC,UAUVC,OAAO,WAAY,EAAKZ,MAAMC,OACvCS,EAASE,OAAO,WAAY,EAAKZ,MAAME,UAEvCW,QAAQC,IAAI,cACZD,QAAQC,IAAIJ,GAEK,uCAEjBK,MAAMC,0FAAgE,CACpEC,OAAO,OACPC,KAAKR,IACJS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACG,GAE3CC,MAAMD,EAAaE,SACnBX,QAAQC,IAAIQ,MACXG,OAAM,SAAAC,GACPb,QAAQa,MAAMA,MA5BN,sC,wEAvCV,IAAMC,EAAOC,EAAQ,IACrB,OAGI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,gBAAiB,QAASC,MAAOC,YAAG,QAASC,OAASC,YAAG,UACrE,kBAACN,EAAA,EAAD,CAAMC,MAAS,CAACM,WAAa,SAAUC,eAAiB,SAAUC,cAAgB,WAChF,kBAACC,EAAA,EAAD,CAAOC,OAAQb,EAAMG,MAAO,CAACE,MAAO,IAAKE,OAAQ,OAEjD,kBAACO,EAAA,EAAD,CAAMX,MAAS,CAACY,MAAO,QAASC,SAAW,KAA3C,kBAIF,kBAACd,EAAA,EAAD,CAAMC,MAAO,CAACc,UAAW,KAAMN,cAAgB,SAAUD,eAAgB,SAAUD,WAAa,WAC9F,kBAACS,EAAA,EAAD,CAAWf,MAAO,CAACI,OAASC,YAAG,MAAOH,MAAQC,YAAG,OAAQU,SAAW,GAAID,MAAO,QAASI,YAAc,QAASC,YAAc,GAAIC,YAAc,cAAcC,qBAAuB,QAAQC,aAAgBC,KAAKhD,cAEjN,kBAAC0C,EAAA,EAAD,CAAWf,MAAO,CAACI,OAAQC,YAAG,MAAOH,MAAQC,YAAG,OAAQW,UAAW,GAAID,SAAW,GAAID,MAAO,QAASI,YAAc,QAASC,YAAc,GAAIC,YAAc,iBAAiBC,qBAAuB,QAAQC,aAAgBC,KAAK7C,iBAHpO,MASA,kBAACuB,EAAA,EAAD,CAAMC,MAAO,CAACsB,WAAWnB,YAAG,OAAQoB,YAAYpB,YAAG,SAEnD,kBAACqB,EAAA,EAAD,CACEC,QAASJ,KAAK5C,UACdiD,MAAM,gB,GAvCeC,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.527bea60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0c9ebdb8.png\";","import React, { Component } from 'react';\nimport { Text, View, Image, TextInput, Button } from 'react-native';\nimport {widthPercentageToDP as wp, heightPercentageToDP as hp} from 'react-native-responsive-screen';\n\nexport default class App extends Component {\n\n    state = {\n      email: '',\n      password: ''\n  }\n  handleEmail = (text) => {\n      this.setState({ email: text })\n  }\n  handlePassword = (text) => {\n      this.setState({ password: text })\n  }\n\n  render() {\n    const logo = require('./logo.png');\n    return (\n\n\n        <View style={{backgroundColor: 'black', width :wp('100%'), height : hp('100%') }} >\n          <View style = {{alignItems : \"center\", justifyContent : \"center\", flexDirection : \"column\"}}>\n            <Image source={logo} style={{width: 192, height: 192}}/>\n\n            <Text style = {{color :'white', fontSize : 30}} >Login Screen </Text>\n          </View>\n\n      \n          <View style={{marginTop: '3%', flexDirection : 'column', justifyContent: \"center\", alignItems : \"center\"}}>\n            <TextInput style={{height : hp('8%'), width : wp('65%'), fontSize : 15, color :'white', borderColor : 'white', borderWidth : 1}} placeholder = \"Enter Email\" placeholderTextColor = 'white' onChangeText = {this.handleEmail}/>\n\n            <TextInput style={{height: hp('8%'), width : wp('65%'), marginTop :35, fontSize : 15, color :'white', borderColor : 'white', borderWidth : 1}} placeholder = \"Enter Password\" placeholderTextColor = 'white' onChangeText = {this.handlePassword}/>\n\n          />\n          \n          </View>\n\n          <View style={{marginLeft:wp('30%'), marginRight:wp('30%')}} >\n\n          <Button \n            onPress={this._postData}\n            title=\"Login\"/>\n\n          </View>\n\n\n          \n\n          \n        </View>\n\n      \n    );\n  }\n\n  _postData = async() =>{\n\n    let formData = new FormData();\n    //formData.append('Cache-Control', 'no-cache');\n    //formData.append('OAUTHCONSUMERKEY', 'Ndf4gF8f42');\n    //formData.append('OAUTHNONCE', 'PpLaR5bAbzB2NTGaHcU38hutQ1M');\n    //formData.append('OAUTHTIMESTAMP', Date.now());\n    //formData.append('OAUTHSIGNATURE', 'PpLaR5bAbzB2NTGaHcU38hutQ1M%3D');\n    //formData.append('LANGUAGE_ID', '101');\n    //formData.append('PERSIANAPP', '1');\n    //formData.append('GUEST_USER', '0');\n    //formData.append('USER_AGENT', 'JADOOTV_MOBILE_ANDROID_PERSIAN');\n    formData.append('username', this.state.email);\n    formData.append('password', this.state.password);\n\n    console.log('DeiveId = ');\n    console.log(formData);\n\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n    fetch(proxyurl+'https://staging.jemtv.com/email-user/index.php/user', {\n      method:'POST',\n      body:formData\n    }).then((response) => response.json()).then((responseJson) => {\n      //this.state.loginResponse = responseJson;\n      alert(responseJson.message);\n      console.log(responseJson);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}